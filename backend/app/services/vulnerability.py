import aiohttp
import asyncio
from typing import List, Dict
import openai
from ..models import Service, Vulnerability, RiskLevel
from ..config import get_settings
import logging

logger = logging.getLogger(__name__)
settings = get_settings()

class VulnerabilityScanner:
    def __init__(self):
        self.nvd_api_url = settings.NVD_API_URL
        openai.api_key = settings.OPENAI_API_KEY

    def _determine_risk_level(self, cvss_score: float) -> RiskLevel:
        if cvss_score >= 7.0:
            return RiskLevel.CRITICAL
        elif cvss_score >= 4.0:
            return RiskLevel.MEDIUM
        return RiskLevel.LOW

    async def _fetch_nvd_data(self, service: Service) -> List[Dict]:
        """
        Fetch vulnerability data from NVD API for a specific service
        """
        async with aiohttp.ClientSession() as session:
            try:
                # Construct search parameters
                params = {
                    'keywordSearch': f"{service.name}",
                    'keywordExactMatch': True
                }
                if service.version:
                    params['versionStart'] = service.version
                    params['versionEnd'] = service.version

                async with session.get(self.nvd_api_url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get('vulnerabilities', [])
                    else:
                        logger.error(f"NVD API error: {response.status}")
                        return []
            except Exception as e:
                logger.error(f"Error fetching NVD data: {str(e)}")
                return []

    async def _get_ai_fix_suggestions(self, vulnerability: Dict) -> str:
        """
        Get fix suggestions using GPT-4
        """
        try:
            prompt = {
                "role": "system",
                "content": f"""Analyze this vulnerability and provide a concrete fix suggestion in JSON format:
                CVE ID: {vulnerability.get('cve', {}).get('id')}
                Description: {vulnerability.get('cve', {}).get('descriptions', [{}])[0].get('value')}
                
                Return the response in this JSON format:
                {{
                    "fix_suggestion": "detailed step-by-step fix",
                    "mitigation_steps": ["step1", "step2", ...],
                    "additional_notes": "any important security considerations"
                }}"""
            }

            response = await openai.ChatCompletion.acreate(
                model="gpt-4",
                messages=[prompt],
                temperature=0.7,
                max_tokens=500
            )

            return response.choices[0].message.content
        except Exception as e:
            logger.error(f"Error getting AI fix suggestions: {str(e)}")
            return "Fix suggestion unavailable"

    async def scan_service_vulnerabilities(self, service: Service) -> List[Vulnerability]:
        """
        Scan for vulnerabilities for a specific service
        """
        vulnerabilities = []
        nvd_data = await self._fetch_nvd_data(service)

        for vuln_data in nvd_data:
            try:
                cve_data = vuln_data.get('cve', {})
                metrics = cve_data.get('metrics', {}).get('cvssMetricV31', [{}])[0].get('cvssData', {})
                
                cvss_score = float(metrics.get('baseScore', 0.0))
                risk_level = self._determine_risk_level(cvss_score)

                # Get AI-powered fix suggestions
                fix_suggestions = await self._get_ai_fix_suggestions(vuln_data)

                vulnerability = Vulnerability(
                    cve_id=cve_data.get('id', ''),
                    description=cve_data.get('descriptions', [{}])[0].get('value', ''),
                    cvss_score=cvss_score,
                    risk_level=risk_level,
                    affected_versions=[service.version] if service.version else [],
                    fix_suggestions=fix_suggestions,
                    references=[ref.get('url', '') for ref in cve_data.get('references', [])]
                )
                vulnerabilities.append(vulnerability)

            except Exception as e:
                logger.error(f"Error processing vulnerability data: {str(e)}")
                continue

        return vulnerabilities
