'use client';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Vulnerability } from '@/types';
import { ScatterChart } from '@tremor/react';

interface VulnerabilityChartProps {
  vulnerabilities: Vulnerability[];
}

export function VulnerabilityChart({ vulnerabilities }: VulnerabilityChartProps) {
  if (!vulnerabilities || !Array.isArray(vulnerabilities)) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Vulnerability CVSS Score Distribution</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-gray-500">No vulnerability data available</p>
        </CardContent>
      </Card>
    );
  }

  const chartData = vulnerabilities.map((vuln, index) => ({
    id: index + 1, // Start from 1 instead of 0 to add left margin
    name: vuln?.cve_id || `Unknown-${index}`,
    'CVSS Score': vuln?.cvss_score || 0,
    category: 'Vulnerabilities',
    size: (vuln?.cvss_score || 0) * 30
  }));

  const customTooltip = ({ payload }: { payload?: { payload: { name: string } }[] }) => {
    if (!payload?.[0]?.payload?.name) return null;
    const vuln = vulnerabilities?.find(v => v?.cve_id === payload[0].payload.name);
    if (!vuln) return null;

    return (
      <div className="p-4 bg-background shadow-lg rounded-lg border max-w-md">
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <p className="font-bold text-lg">{vuln.cve_id || 'Unknown'}</p>
            <span className={`px-2 py-1 rounded-full text-sm font-medium
              ${vuln.risk_level === 'critical' ? 'bg-rose-100 dark:bg-rose-900 text-rose-700 dark:text-rose-200' :
                vuln.risk_level === 'medium' ? 'bg-amber-100 dark:bg-amber-900 text-amber-700 dark:text-amber-200' :
                  'bg-emerald-100 dark:bg-emerald-900 text-emerald-700 dark:text-emerald-200'
              }`}
            >
              {vuln.risk_level || 'unknown'}
            </span>
          </div>
          <p className="text-sm text-muted-foreground">{vuln.description || 'No description available'}</p>
          <p className="text-sm">
            <span className="font-semibold">CVSS Score:</span> {vuln.cvss_score?.toFixed(1) || 'N/A'}
          </p>
        </div>
      </div>
    );
  };

  const valueFormatter = (value: number) => `${value.toFixed(1)}`;

  const Legend = () => (
    <div className="flex items-center justify-end gap-4 mt-2">
      <div className="flex items-center gap-2">
        <div className="w-3 h-3 rounded-full bg-rose-500 dark:bg-rose-400"></div>
        <span className="text-sm text-muted-foreground">Critical (CVSS ≥ 7.0)</span>
      </div>
      <div className="flex items-center gap-2">
        <div className="w-3 h-3 rounded-full bg-amber-500 dark:bg-amber-400"></div>
        <span className="text-sm text-muted-foreground">Medium (4.0-6.9)</span>
      </div>
      <div className="flex items-center gap-2">
        <div className="w-3 h-3 rounded-full bg-emerald-500 dark:bg-emerald-400"></div>
        <span className="text-sm text-muted-foreground">Low (≤ 3.9)</span>
      </div>
    </div>
  );

  return (
    <Card>
      <CardHeader>
        <CardTitle>Vulnerability CVSS Score Distribution</CardTitle>
      </CardHeader>
      <CardContent>
        <ScatterChart
          data={chartData}
          category="category"
          x="id"
          y="CVSS Score"
          size="size"
          colors={["rgb(255, 255, 255)"]}
          valueFormatter={valueFormatter}
          showLegend={false}
          className="h-80 dark:[&_circle]:!fill-white dark:[&_circle]:!stroke-white dark:[&_text]:!fill-white dark:[&_.axis-tick]:!text-white"
          customTooltip={customTooltip}
          minXValue={0}  // Set minimum X value
          maxXValue={vulnerabilities.length + 1}  // Add 1 for right margin
          yAxisWidth={60}  // Add more space for Y-axis labels
        />
        <Legend />
      </CardContent>
    </Card>
  );
}
